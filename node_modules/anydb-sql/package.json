{
  "name": "anydb-sql",
  "version": "0.6.37",
  "description": "Minimal ORM for mysql, postgresql and sqlite with complete arbitrary SQL query support (based on brianc's query builder sql)",
  "main": "anydb-sql.js",
  "scripts": {
    "test": "tap test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/doxout/anydb-sql.git"
  },
  "author": {
    "name": "spion"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "keywords": [
    "any",
    "db",
    "sql",
    "orm",
    "postgres",
    "pg",
    "postgresql",
    "mysql",
    "sqlite"
  ],
  "bugs": {
    "url": "https://github.com/doxout/anydb-sql/issues"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "any-db": "^2.1.0",
    "any-db-mysql": "^2.1.2",
    "any-db-postgres": "^2.1.3",
    "any-db-transaction": "^2.2.1",
    "bluebird": "^2.3.6",
    "sql": "^0.45.3"
  },
  "devDependencies": {
    "blue-tape": "^0.1.7",
    "sqlite3": "~2.1.10"
  },
  "readme": "# anydb-sql\n\nMinimal ORM for mysql, postgresql and sqlite with complete arbitrary SQL query\nsupport.\n\nBased on the [node-sql](https://github.com/brianc/node-sql) query builder and\n[node-anydb](https://github.com/grncdr/node-any-db) connection pool\n\n# examples and usage:\n\n## initialization\n\nInitializing an instance also creates a connection pool. The url argument is\nthe same as in node-anydb\n\n```js\nvar anydbsql = require('anydb-sql');\n\nvar db = anydbsql({\n    url: 'postgres://user:pass@host:port/database',\n    connections: { min: 2, max: 20 }\n});\n```\n\n## table definition\n\nDefining a table is the same as in node-sql:\n\n```js\nvar user = db.define({\n    name: 'users',\n    columns: {\n        id: {primaryKey: true},\n        email: {},\n        password: {}\n    }\n});\n```\n\n### relationships\n\nYou can also add properties to the table that are based on relationships\nbetween tables by adding a `has` property\n\n```js\nvar user = db.define({\n    name: 'users',\n    columns: { ... }\n    has: {\n        posts: {from: 'posts', many: true},\n        group: {from: 'groups'}\n    }\n});\n// user.posts is now a \"subtable\"\n```\n\nRead about [joins and subobjects](#joins-and-subobjects) to see how you can\nuse subtables with `selectDeep`\n\n## extra query methods\n\nQueries have all the methods as in node-sql, plus the additional methods:\n\n* exec(function(err, rows)) - executes the query and calls the callback\n  with an array of rows\n* all - same as exec\n* get(function(err, row)) - executes the query and returns the first result\n* execWithin(transaction, function(err, rows)) - execute within a transaction\n* allWithin(tx, cb), getWithin(tx, cb) - all/get within a transaction.\n* selectDeep(args) - deeply select join results (with grouping). Arguments can\n  be fields, tables or subtables (created with relationships).\n  More info in the section [joins and subobjects](#joins-and-subobjects) below.\n\nIf you omit the callback from a querying method, a promise will be\nreturned instead.\n\nUse regular node-sql queries then chain one of the querying methods at the\nend:\n\n```js\nuser.where({email: email}).get(function(err, user) {\n  // user.name,\n});\n```\n\n## joins and subobjects\n\nJoin queries can be constructed using node-sql. The format of the results is\nthe same as with anydb\n\n```js\nuser.select(user.name, post.content)\n  .from(user.join(post).on(user.id.equals(post.userId)))\n  .where(post.date.gt(yesterday))\n  .all(function(err, userposts) {\n    // res[0].name and res[0].content\n  });\n```\n\nWhen creating join queries, you can generate sub-objects in the result by\nusing `selectDeep`\n\n```js\nuser.from(user.join(post).on(user.id.equals(post.userId)))\n  .where(post.date.gt(yesterday))\n  .selectDeep(user.name, post.content)\n  .all(function(err, res) {\n    // res[0].user.name and res[0].post.content\n  });\n```\n\nWith selectDeep you can also utilize `has` relationships to get full-blown\nresult structures:\n\n```js\nuser.from(user.join(user.posts).on(user.id.equals(user.posts.userId)))\n  .where(user.posts.date.gt(yesterday))\n  .selectDeep(user.id, user.name, user.posts)\n  .all(function(err, res) {\n    // res[0] is\n    // { id: id, name: name, posts: [postObj, postObj, ...] }\n  });\n```\n\n`selectDeep` can accept tables, their fields, their `has` relationships,\nrelationship fields, relationships' relationships etc (recursively)\n\n```js\nuser.from(user.join(user.posts).on(\n        user.id.equals(user.posts.userId))\n    .join(user.posts.comments).on(\n        user.posts.id.equals(user.posts.comments.postId))\n    .selectDeep(user.id, user.name, user.posts.id, user.posts.content,\n        user.posts.comments).all(function(err, res) {\n            // res[0] is\n            // {id: id, name: name: posts: [\n            //     {id: pid, content: content, comments: [commentObj, ...]},\n            //     {id: pid, content: content, comments: [commentObj, ...]},\n            //     ...\n            // ]}\n\n        });\n```\n\n## transactions\n\nTo create a transaction and execute queries within it, use `db.begin()`\n\nExecute constructed queries within that transaction using `execWithin`,\n`getWithin` or `allWithin`\n\n```js\nvar tx = db.begin()\nuser.insert({name: 'blah'}).returning(user.id).execWithin(tx);\nuser.insert({name: 'bleh'}).returning(user.id).execWithin(tx);\nuser.where({name: 'blah').getWithin(tx, function(err, res) {\n    // the user is there!\n});\ntx.commit();\n```\n\nWhen using promises, you can also use the safer API:\n\n```js\ndb.transaction(function(tx) { ... })\n```\n\nand you will get autocommit / autorollback depending on whether the promise\nreturned within the passed function is fulfilled or rejected.\n\nTransactions have the same API as anydb tranactions, but they're extended with\nthe following methods:\n\n### `tx.savepoint()`\n\nTransactions support savepoints\n\n```js\nvar sp = tx.savepoint();\nsp.release();\nsp.restore();\n```\n\n### `tx.logQueries([enable])`\n\nWill cause the queries executed within the transaction to be logged. This\nmethod should be useful for debugging purposes. The parameter is a boolean.\n\n# query building syntax\n\nFor more info on how to build queries, look at\n[the node-sql test samples and their corresponding\nSQL](https://github.com/brianc/node-sql/tree/master/test/dialects)\n\n# `db.close`\n\nYou can close the connection pool using `db.close`\n\n```js\ndb.close();\n```\n\n# `db.query`\n\nTo execute custom queries, use `db.query`\n\n```js\ndb.query(...anydb arguments...)\n```\n\n# `db.functions` and `db.makeFunction`\n\n`db.makeFunction` allows you to create a new function supported in the database.\n\n`db.functions` contains a couple of predefined, common functions.\n\nExample:\n\n```js\nvar max = db.functions.MAX\nvar avg = db.makeFunction('AVG');\nvar q = user.select(max(user.age).as('maxage'), avg(user.age).as('avgage'));\n```\n\n# licence\n\nMIT\n",
  "_id": "anydb-sql@0.6.37",
  "dist": {
    "shasum": "afc9af54b3687b93834138b80c3d00f1b7b481e3"
  },
  "_from": "anydb-sql@",
  "_resolved": "https://registry.npmjs.org/anydb-sql/-/anydb-sql-0.6.37.tgz"
}
